import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.database.*;
import sgcib.tsf.dragonBook.repository.*;
import sgcib.tsf.dragonBook.services.save.SaveDataServiceImpl;
import sgcib.tsf.dragonBook.services.utilities.DataSyncUtility;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest(classes = DragonBookApplication.class)
@ContextConfiguration
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
public class SaveDataServiceImplTest {

    @Mock
    private DataSyncUtility dataSyncUtility;

    @Mock
    private BasketCompoRepository basketCompoRepository;

    @Mock
    private BuySellDataRepository buySellDataRepository;

    @Mock
    private LendAndBorrowDataRepository lendAndBorrowDataRepository;

    @Mock
    private ParamResponseRepository paramResponseRepository;

    @InjectMocks
    private SaveDataServiceImpl saveDataService;

    private ParamResponse paramResponse;
    private List<BasketCompo> basketCompoList;
    private List<BuySellData> buySellDataList;
    private List<LendAndBorrowData> lendAndBorrowDataList;

    @Before
    public void setup() {
        paramResponse = new ParamResponse();
        paramResponse.setUpdatedAt(LocalDateTime.now().withNano(0));
        paramResponse.setParamName("testParam");

        BasketCompo basketCompo = new BasketCompo();
        basketCompoList = new ArrayList<>();
        basketCompoList.add(basketCompo);

        BuySellData buySellData = new BuySellData();
        buySellData.setFilename("testFile");
        buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        LendAndBorrowData lendAndBorrowData = new LendAndBorrowData();
        lendAndBorrowDataList = new ArrayList<>();
        lendAndBorrowDataList.add(lendAndBorrowData);
    }

    @Test
    public void testSaveParamResponse_Success() {
        doNothing().when(paramResponseRepository).saveAllAndFlush(anyList());
        String result = saveDataService.saveParamResponse(paramResponse, "testFile");
        Assert.assertEquals("Saved Successfully", result);
    }

    @Test
    public void testSaveParamResponse_Failure() {
        doThrow(new RuntimeException("Database error")).when(paramResponseRepository).saveAllAndFlush(anyList());
        String result = saveDataService.saveParamResponse(paramResponse, "testFile");
        Assert.assertEquals("Couldn't save the validated data", result);
    }

    @Test
    public void testSaveBasketCompo_Success() {
        when(basketCompoRepository.saveAllAndFlush(anyList())).thenReturn(basketCompoList);
        String result = saveDataService.saveBasketCompo(basketCompoList);
        Assert.assertEquals("Saved Successfully", result);
    }

    @Test
    public void testSaveBasketCompo_Failure() {
        doThrow(new RuntimeException("Database error")).when(basketCompoRepository).saveAllAndFlush(anyList());
        String result = saveDataService.saveBasketCompo(basketCompoList);
        Assert.assertEquals("Couldn't save the validated BasketCompo data", result);
    }

    @Test
    public void testSaveBuySell_Success() {
        when(dataSyncUtility.syncToBasketCompo(anyString(), anyList())).thenReturn(basketCompoList);
        when(basketCompoRepository.saveAllAndFlush(anyList())).thenReturn(basketCompoList);
        when(buySellDataRepository.saveAllAndFlush(anyList())).thenReturn(buySellDataList);

        String result = saveDataService.saveBuySell(buySellDataList);
        Assert.assertEquals("Saved Successfully", result);
    }

    @Test
    public void testSaveBuySell_NoChanges() {
        List<BuySellData> emptyBuySellDataList = new ArrayList<>();
        String result = saveDataService.saveBuySell(emptyBuySellDataList);
        Assert.assertEquals("No changes identified", result);
    }

    @Test
    public void testSaveBuySell_FilenameMissing() {
        buySellDataList.get(0).setFilename("");
        String result = saveDataService.saveBuySell(buySellDataList);
        Assert.assertEquals("FileName is missing", result);
    }

    @Test
    public void testSaveBuySell_Failure() {
        when(dataSyncUtility.syncToBasketCompo(anyString(), anyList())).thenReturn(basketCompoList);
        doThrow(new RuntimeException("Database error")).when(buySellDataRepository).saveAllAndFlush(anyList());
        
        String result = saveDataService.saveBuySell(buySellDataList);
        Assert.assertEquals("Couldn't save the validated data", result);
    }

    @Test
    public void testSaveLendBorrow_Success() {
        when(lendAndBorrowDataRepository.saveAllAndFlush(anyList())).thenReturn(lendAndBorrowDataList);
        String result = saveDataService.saveLendBorrow(lendAndBorrowDataList);
        Assert.assertEquals("Saved Successfully", result);
    }

    @Test
    public void testSaveLendBorrow_Failure() {
        doThrow(new RuntimeException("Database error")).when(lendAndBorrowDataRepository).saveAllAndFlush(anyList());
        String result = saveDataService.saveLendBorrow(lendAndBorrowDataList);
        Assert.assertEquals("Couldn't save the validated data", result);
    }
}
