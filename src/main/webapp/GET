import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.database.*;
import sgcib.tsf.dragonBook.repository.*;
import sgcib.tsf.dragonBook.services.config.ConfigService;
import sgcib.tsf.dragonBook.services.get.GetDataServiceImpl;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;

@SpringBootTest(classes = DragonBookApplication.class)
@ContextConfiguration
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
public class GetDataServiceImplTest {
    @Mock
    private BasketCompoRepository basketCompoRepositoryMock;

    @Mock
    private BuySellDataRepository buySellDataRepositoryMock;

    @Mock
    private LendAndBorrowDataRepository lendAndBorrowDataRepositoryMock;

    @Mock
    private ParamResponseRepository paramResponseRepositoryMock;

    @Mock
    private TraderDetailsRepository traderDetailsRepositoryMock;

    @Mock
    private UserDetailsRepository userDetailsRepositoryMock;

    @Mock
    private ConfigService configServiceMock;

    private GetDataServiceImpl getDataService;

    @Before
    public void setup() {
        basketCompoRepositoryMock = mock(BasketCompoRepository.class);
        buySellDataRepositoryMock = mock(BuySellDataRepository.class);
        lendAndBorrowDataRepositoryMock = mock(LendAndBorrowDataRepository.class);
        paramResponseRepositoryMock = mock(ParamResponseRepository.class);
        traderDetailsRepositoryMock = mock(TraderDetailsRepository.class);
        userDetailsRepositoryMock = mock(UserDetailsRepository.class);
        configServiceMock = mock(ConfigService.class);

        getDataService = new GetDataServiceImpl(
                basketCompoRepositoryMock,
                buySellDataRepositoryMock,
                lendAndBorrowDataRepositoryMock,
                paramResponseRepositoryMock,
                traderDetailsRepositoryMock,
                userDetailsRepositoryMock,
                configServiceMock
        );
    }

    @Test
    public void testGetBasketCompoData() {
        String fileName = "testFile.csv";
        BasketCompo basketCompo = new BasketCompo();
        Collection<BasketCompo> expectedData = Collections.singletonList(basketCompo);

        Mockito.when(basketCompoRepositoryMock.findByFilename(anyString()))
                .thenReturn(expectedData);

        Collection<BasketCompo> result = getDataService.getBasketCompoData(fileName);
        Assert.assertNotNull(result);
        Assert.assertEquals(expectedData, result);
    }

    @Test
    public void testGetBuySellData() {
        String fileName = "testFile.csv";
        BuySellData buySellData = new BuySellData();
        Collection<BuySellData> expectedData = Collections.singletonList(buySellData);

        Mockito.when(buySellDataRepositoryMock.findByFilename(anyString()))
                .thenReturn(expectedData);

        Collection<BuySellData> result = getDataService.getBuySellData(fileName);
        Assert.assertNotNull(result);
        Assert.assertEquals(expectedData, result);
    }

    @Test
    public void testGetLnBData() {
        String fileName = "testFile.csv";
        LendAndBorrowData lendAndBorrowData = new LendAndBorrowData();
        List<LendAndBorrowData> expectedData = Collections.singletonList(lendAndBorrowData);

        Mockito.when(lendAndBorrowDataRepositoryMock.findByFilename(anyString()))
                .thenReturn(expectedData);

        List<LendAndBorrowData> result = getDataService.getLnBData(fileName);
        Assert.assertNotNull(result);
        Assert.assertEquals(expectedData, result);
    }

    @Test
    public void testGetParamResponse() {
        String fileName = "testFile.csv";
        ParamResponse paramResponse = new ParamResponse();

        Mockito.when(paramResponseRepositoryMock.findByFilename(anyString()))
                .thenReturn(paramResponse);

        ParamResponse result = getDataService.getParamResponse(fileName);
        Assert.assertNotNull(result);
        Assert.assertEquals(paramResponse, result);
    }
}
