import com.google.gson.Gson;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.*;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.api.GalaxyInstrumentResponse;
import sgcib.tsf.dragonBook.model.api.TranscodeRequest;

import java.util.Collections;
import java.util.List;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.mock;

@SpringBootTest(classes = DragonBookApplication.class)
@ContextConfiguration
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
public class GalaxyConnectorServiceImplTest {

    @Mock
    private RestTemplate restTemplateMock;

    private GalaxyConnectorServiceImpl galaxyConnectorService;

    @Before
    public void setup() {
        restTemplateMock = mock(RestTemplate.class);
        galaxyConnectorService = new GalaxyConnectorServiceImpl(restTemplateMock);
        galaxyConnectorService.setGalaxyUrl("https://galaxy-testing/api/v1/instruments");
    }

    @Test
    public void testGetGalaxyInstrumentResponse() {
        List<String> bbgCode = List.of("BBG123");
        TranscodeRequest transcodeRequest = new TranscodeRequest();
        transcodeRequest.setCodeId("FIN_ID_TICKER");
        List<String> staticAttributes = List.of("FIN_ID_TICKER", "FIN_ID_ELIOT");

        GalaxyInstrumentResponse expectedResponse = new GalaxyInstrumentResponse();
        ResponseEntity<GalaxyInstrumentResponse> responseEntity = ResponseEntity.ok(expectedResponse);

        Mockito.when(restTemplateMock.exchange(
                eq("https://galaxy-testing/api/v1/instruments"),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(GalaxyInstrumentResponse.class)))
            .thenReturn(responseEntity);

        ResponseEntity<GalaxyInstrumentResponse> response = galaxyConnectorService.getGalaxyInstrumentResponse(bbgCode, transcodeRequest, staticAttributes);

        Assert.assertNotNull(response);
        Assert.assertEquals(expectedResponse, response.getBody());
    }

    @Test(expected = HttpServerErrorException.class)
    public void testGetGalaxyInstrumentResponse_ServerError() {
        List<String> bbgCode = List.of("BBG123");
        TranscodeRequest transcodeRequest = new TranscodeRequest();
        transcodeRequest.setCodeId("FIN_ID_TICKER");
        List<String> staticAttributes = List.of("FIN_ID_TICKER", "FIN_ID_ELIOT");

        Mockito.when(restTemplateMock.exchange(
                eq("https://galaxy-testing/api/v1/instruments"),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(GalaxyInstrumentResponse.class)))
            .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        galaxyConnectorService.getGalaxyInstrumentResponse(bbgCode, transcodeRequest, staticAttributes);
    }

    @Test(expected = RuntimeException.class)
    public void testGetEliotCode_ServerError() {
        List<String> bbgCode = List.of("BBG123");

        Mockito.when(restTemplateMock.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(GalaxyInstrumentResponse.class)))
            .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        galaxyConnectorService.getEliotCode(bbgCode);
    }

    @Test(expected = RuntimeException.class)
    public void testGetBbgEliotCode_ServerError() {
        List<String> bdrId = List.of("BDR123");

        Mockito.when(restTemplateMock.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(GalaxyInstrumentResponse.class)))
            .thenThrow(new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR));

        galaxyConnectorService.getBbgEliotCode(bdrId);
    }
}
