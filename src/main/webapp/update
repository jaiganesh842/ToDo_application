import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.database.BuySellData;
import sgcib.tsf.dragonBook.model.database.ParamResponse;
import sgcib.tsf.dragonBook.repository.BuySellDataRepository;
import sgcib.tsf.dragonBook.repository.ParamResponseRepository;
import sgcib.tsf.dragonBook.services.eliot.EliotDealBooking;
import sgcib.tsf.dragonBook.services.exception.CustomException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = DragonBookApplication.class)
@ContextConfiguration
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
public class BuySellBookingServiceImplTest {

    @Mock
    private EliotDealBooking eliotDealBooking;

    @Mock
    private ParamResponseRepository paramResponseRepository;

    @Mock
    private BuySellDataRepository buySellDataRepository;

    private BuySellBookingServiceImpl buySellBookingService;

    @Before
    public void setup() {
        eliotDealBooking = mock(EliotDealBooking.class);
        paramResponseRepository = mock(ParamResponseRepository.class);
        buySellDataRepository = mock(BuySellDataRepository.class);

        buySellBookingService = new BuySellBookingServiceImpl(eliotDealBooking, paramResponseRepository, buySellDataRepository);
    }

    @Test
    public void testBsBooking_Internal() {
        String fileName = "testFile";
        String scope = "Internal";

        ParamResponse paramResponse = new ParamResponse();
        paramResponse.setIntExt("Internal");

        BuySellData buySellData = new BuySellData();
        buySellData.setBookingStatus("NOT_BOOKED");
        Collection<BuySellData> buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        when(paramResponseRepository.findByFilename(fileName)).thenReturn(paramResponse);
        when(buySellDataRepository.findByFilename(fileName)).thenReturn(buySellDataList);
        when(eliotDealBooking.bsInternalExternalBooking(any(), any())).thenReturn("BOOKED");

        String result = buySellBookingService.bsBooking(fileName, scope);
        Assert.assertEquals("Done. Please check Booking status for any Errors", result);
    }

    @Test
    public void testBsBooking_External() {
        String fileName = "testFile";
        String scope = "External";

        ParamResponse paramResponse = new ParamResponse();
        paramResponse.setIntExt("External");

        BuySellData buySellData = new BuySellData();
        buySellData.setBookingStatus("NOT_BOOKED");
        Collection<BuySellData> buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        when(paramResponseRepository.findByFilename(fileName)).thenReturn(paramResponse);
        when(buySellDataRepository.findByFilename(fileName)).thenReturn(buySellDataList);
        when(eliotDealBooking.bsInternalExternalBooking(any(), any())).thenReturn("BOOKED");

        String result = buySellBookingService.bsBooking(fileName, scope);
        Assert.assertEquals("Done. Please check Booking status for any Errors", result);
    }

    @Test(expected = CustomException.class)
    public void testSave_Exception() {
        BuySellData buySellData = new BuySellData();
        Collection<BuySellData> buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        Mockito.doThrow(new RuntimeException()).when(buySellDataRepository).saveAllAndFlush(buySellDataList);

        buySellBookingService.save(buySellDataList);
    }

    @Test
    public void testGetMifidData() {
        BuySellData buySellData = new BuySellData();
        buySellData.setTraderId("TRADER123");

        EliotMifidData mifidData = buySellBookingService.getMifidData(buySellData);

        Assert.assertEquals("TRADER123", mifidData.getTraderId());
    }

    @Test
    public void testLateBooking() {
        EliotDealInsertContext context = buySellBookingService.lateBooking();

        Assert.assertNotNull(context);
        Assert.assertNotNull(context.getLateBooking());
    }
}
-----------------------------------------------------------------------------------------------------------------------

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.database.BuySellData;
import sgcib.tsf.dragonBook.model.database.ParamResponse;
import sgcib.tsf.dragonBook.repository.BuySellDataRepository;
import sgcib.tsf.dragonBook.repository.ParamResponseRepository;
import sgcib.tsf.dragonBook.services.eliot.EliotDealBooking;
import sgcib.tsf.dragonBook.services.exception.CustomException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.CompletableFuture;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = DragonBookApplication.class)
@ContextConfiguration
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
public class BuySellBookingServiceImplTest {

    @Mock
    private EliotDealBooking eliotDealBooking;

    @Mock
    private ParamResponseRepository paramResponseRepository;

    @Mock
    private BuySellDataRepository buySellDataRepository;

    private BuySellBookingServiceImpl buySellBookingService;

    @Before
    public void setup() {
        eliotDealBooking = mock(EliotDealBooking.class);
        paramResponseRepository = mock(ParamResponseRepository.class);
        buySellDataRepository = mock(BuySellDataRepository.class);

        buySellBookingService = new BuySellBookingServiceImpl(eliotDealBooking, paramResponseRepository, buySellDataRepository);
    }

    @Test
    public void testBsBooking_Internal() {
        String fileName = "testFile";
        String scope = "Internal";

        ParamResponse paramResponse = new ParamResponse();
        paramResponse.setIntExt("Internal");

        BuySellData buySellData = new BuySellData();
        buySellData.setBookingStatus("NOT_BOOKED");
        Collection<BuySellData> buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        when(paramResponseRepository.findByFilename(fileName)).thenReturn(paramResponse);
        when(buySellDataRepository.findByFilename(fileName)).thenReturn(buySellDataList);
        when(eliotDealBooking.bsInternalExternalBooking(any(), any())).thenReturn("BOOKED");

        String result = buySellBookingService.bsBooking(fileName, scope);
        Assert.assertEquals("Done. Please check Booking status for any Errors", result);
    }

    @Test
    public void testBsBooking_External() {
        String fileName = "testFile";
        String scope = "External";

        ParamResponse paramResponse = new ParamResponse();
        paramResponse.setIntExt("External");

        BuySellData buySellData = new BuySellData();
        buySellData.setBookingStatus("NOT_BOOKED");
        Collection<BuySellData> buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        when(paramResponseRepository.findByFilename(fileName)).thenReturn(paramResponse);
        when(buySellDataRepository.findByFilename(fileName)).thenReturn(buySellDataList);
        when(eliotDealBooking.bsInternalExternalBooking(any(), any())).thenReturn("BOOKED");

        String result = buySellBookingService.bsBooking(fileName, scope);
        Assert.assertEquals("Done. Please check Booking status for any Errors", result);
    }

    @Test
    public void testBsBooking() {
        String fileName = "testFile";
        String internalScope = "Internal";
        String externalScope = "External";

        // Test for Internal
        ParamResponse internalParamResponse = new ParamResponse();
        internalParamResponse.setIntExt("Internal");

        BuySellData internalBuySellData = new BuySellData();
        internalBuySellData.setBookingStatus("NOT_BOOKED");
        Collection<BuySellData> internalBuySellDataList = new ArrayList<>();
        internalBuySellDataList.add(internalBuySellData);

        when(paramResponseRepository.findByFilename(fileName)).thenReturn(internalParamResponse);
        when(buySellDataRepository.findByFilename(fileName)).thenReturn(internalBuySellDataList);
        when(eliotDealBooking.bsInternalExternalBooking(any(), any())).thenReturn("BOOKED");

        String internalResult = buySellBookingService.bsBooking(fileName, internalScope);
        Assert.assertEquals("Done. Please check Booking status for any Errors", internalResult);

        // Resetting mocks for External
        Mockito.reset(paramResponseRepository, buySellDataRepository, eliotDealBooking);

        // Test for External
        ParamResponse externalParamResponse = new ParamResponse();
        externalParamResponse.setIntExt("External");

        BuySellData externalBuySellData = new BuySellData();
        externalBuySellData.setBookingStatus("NOT_BOOKED");
        Collection<BuySellData> externalBuySellDataList = new ArrayList<>();
        externalBuySellDataList.add(externalBuySellData);

        when(paramResponseRepository.findByFilename(fileName)).thenReturn(externalParamResponse);
        when(buySellDataRepository.findByFilename(fileName)).thenReturn(externalBuySellDataList);
        when(eliotDealBooking.bsInternalExternalBooking(any(), any())).thenReturn("BOOKED");

        String externalResult = buySellBookingService.bsBooking(fileName, externalScope);
        Assert.assertEquals("Done. Please check Booking status for any Errors", externalResult);
    }

    @Test(expected = CustomException.class)
    public void testSave_Exception() {
        BuySellData buySellData = new BuySellData();
        Collection<BuySellData> buySellDataList = new ArrayList<>();
        buySellDataList.add(buySellData);

        Mockito.doThrow(new RuntimeException()).when(buySellDataRepository).saveAllAndFlush(buySellDataList);

        buySellBookingService.save(buySellDataList);
    }

    @Test
    public void testGetMifidData() {
        BuySellData buySellData = new BuySellData();
        buySellData.setTraderId("TRADER123");

        EliotMifidData mifidData = buySellBookingService.getMifidData(buySellData);

        Assert.assertEquals("TRADER123", mifidData.getTraderId());
    }

    @Test
    public void testLateBooking() {
        EliotDealInsertContext context = buySellBookingService.lateBooking();

        Assert.assertNotNull(context);
        Assert.assertNotNull(context.getLateBooking());
    }
}

