body{
	background-color:#36454F;
}

.heading {
  margin-top:20px;
  text-align: center;
  display: flex;
  justify-content: center;
  padding-left:5%;
  font-size:50px;
   color: #D8D8F5;
   font-family: 'Tilt Prism', cursive;
}
.container{
	margin-top:-35px;
	margin-left:450px;
	height:550px;
	width:550px;
	text-align: center;
	background-color:black;
	border: none;
	border-radius:5px;
}
.item-container{
	display: flex;
    align-items: center;
    margin-top:5px;
    font-size:15px;
}

.remove{
	text-align:left;
	background-color:#19C519;
	margin-left:15px;
	margin-top:5px;
	font-size:20px;
	border: none;
	color:white;
	border-radius:10px;
	height:25px;
	width:70px;
	transition: width 0.5s ease, height 0.5s ease;
	font-family: 'Dancing Script', cursive;
}
.remove:hover{
	height:30px;
	width:75px;
	font-size:20px;
	border-radius:20px;
	background-color:green;	
}

.input-container{
	padding-top:10px;
}
ol{
	padding-left:+65px;
	color:white;
	font-family: 'Dancing Script', cursive;
	font-size:20px;
}

p{
	font-size:30px;
	font-family: 'Dancing Script', cursive;
	margin-bottom:-10px;
	margin-top:10px;
	 font-weight: bold;
}
.Add{
	font-family: 'Dancing Script', cursive;
	font-size:30px;
	color:white;
	background-color:#FF5B5B;
	border: none;
	width:110px;
	height:50px;
	margin-left:+10px;
	border-radius:25px;
	transition: width 0.5s ease, height 0.5s ease;
}
.Add:hover{
	width:115px;
	height:55px;
	background-color:red;
	border-radius:30px;
}
.input1{
	height:50px;
	width:350px;
	font-size:20px;
}
.input1:focus{
	 outline: none;
}

p{
	text-align:left;
	color:white;
	padding-left:+50px;
}
.item-content{
	padding-top:10px;
	color:white;
	font-size:25px;
    font-family: 'Dancing Script', cursive;
}
.item-content::{
	text-transform: capitalize;
}
//package sgcib.tsf.dragonBook.services;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.*;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.xone.basket.compo.*;
import sgcib.tsf.dragonBook.services.exception.DealNotFoundException;
import sgcib.tsf.dragonBook.services.xone.XoneBookDealsImpl;
import sgcib.tsf.dragonBook.services.xone.XoneUpdateEventsResponse;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

@SpringBootTest(classes = DragonBookApplication.class)
@ContextConfiguration
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
public class XoneBookDealsImplTest {

    @Mock
    private RestTemplate restTemplateMock;

    @InjectMocks
    private XoneBookDealsImpl xoneBookDealsImpl;

    @Before
    public void setup() {
        // Setting the URLs
        xoneBookDealsImpl.dealUrl = "https://xone-testing/api/v1/deal";
        xoneBookDealsImpl.eTagUrl = "https://xone-testing/api/v1/trade";
        xoneBookDealsImpl.createDealUrl = "https://xone-testing/api/v1/create-deal";
    }

    @Test
    public void testGetETagWithNewRateFixingTrue() {
        XoneGetBasketDetails uriResponse = buildXoneGetBasketDetails("2024-04-10");
        HttpHeaders headers = new HttpHeaders();
        headers.add("eTag", "qwadfeydwtdwega_");
        XoneDeals basketCompo = buildBasketCompo();
        ResponseEntity<XoneGetBasketDetails> response = new ResponseEntity<>(uriResponse, headers, HttpStatus.OK);
        Boolean result = xoneBookDealsImpl.getETag(basketCompo, response, true);

        assertNotNull(result);
        assertTrue(result);
    }

    @Test
    public void testGetETagWithNewRateFixingFalse() {
        XoneGetBasketDetails uriResponse = buildXoneGetBasketDetails("2024-04-08");
        HttpHeaders headers = new HttpHeaders();
        headers.add("eTag", "qwadfeydwtdwega_");
        XoneDeals basketCompo = buildBasketCompo();
        ResponseEntity<XoneGetBasketDetails> response = new ResponseEntity<>(uriResponse, headers, HttpStatus.OK);
        Boolean result = xoneBookDealsImpl.getETag(basketCompo, response, true);

        assertNotNull(result);
        assertFalse(result);
    }

    @Test
    public void testUpdateEvents() {
        XoneDeals xoneRequest = buildBasketCompo();
        String tradeRef = "TRADE123";
        Boolean basketCompo = true;
        String eTag = "eTag123";

        HttpHeaders headers = new HttpHeaders();
        headers.add("If-Match", eTag);
        HttpEntity<Object> request = new HttpEntity<>(xoneRequest, headers);
        XoneUpdateEventsResponse expectedResponse = new XoneUpdateEventsResponse();
        ResponseEntity<XoneUpdateEventsResponse> responseEntity = new ResponseEntity<>(expectedResponse, HttpStatus.OK);

        when(restTemplateMock.exchange(
            eq("https://xone-testing/api/v1/deal"),
            eq(HttpMethod.POST),
            any(HttpEntity.class),
            eq(XoneUpdateEventsResponse.class),
            anyMap()
        )).thenReturn(responseEntity);

        XoneUpdateEventsResponse response = xoneBookDealsImpl.updateEvents(xoneRequest, tradeRef, basketCompo);

        assertNotNull(response);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testUpdateEventsWithHttpServerErrorException() {
        XoneDeals xoneRequest = buildBasketCompo();
        String tradeRef = "TRADE123";
        Boolean basketCompo = true;

        HttpServerErrorException serverErrorException = new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR);

        when(restTemplateMock.exchange(
            eq("https://xone-testing/api/v1/deal"),
            eq(HttpMethod.POST),
            any(HttpEntity.class),
            eq(XoneUpdateEventsResponse.class),
            anyMap()
        )).thenThrow(serverErrorException);

        RuntimeException thrownException = assertThrows(
            RuntimeException.class,
            () -> xoneBookDealsImpl.updateEvents(xoneRequest, tradeRef, basketCompo)
        );

        assertEquals("ERROR: Failed to Book Basket Compo, Check Logs", thrownException.getMessage());
    }

    @Test
    public void testBookDeals() {
        XoneDeals inBDatum = buildBasketCompo();
        XoneUpdateEventsResponse expectedResponse = new XoneUpdateEventsResponse();
        ResponseEntity<XoneUpdateEventsResponse> responseEntity = new ResponseEntity<>(expectedResponse, HttpStatus.OK);

        when(restTemplateMock.exchange(
            eq("https://xone-testing/api/v1/create-deal"),
            eq(HttpMethod.POST),
            any(HttpEntity.class),
            eq(XoneUpdateEventsResponse.class)
        )).thenReturn(responseEntity);

        XoneUpdateEventsResponse response = xoneBookDealsImpl.bookDeals(inBDatum);

        assertNotNull(response);
        assertEquals(expectedResponse, response);
    }

    @Test
    public void testBookDealsWithHttpServerErrorException() {
        XoneDeals inBDatum = buildBasketCompo();

        HttpServerErrorException serverErrorException = new HttpServerErrorException(HttpStatus.INTERNAL_SERVER_ERROR);

        when(restTemplateMock.exchange(
            eq("https://xone-testing/api/v1/create-deal"),
            eq(HttpMethod.POST),
            any(HttpEntity.class),
            eq(XoneUpdateEventsResponse.class)
        )).thenThrow(serverErrorException);

        RuntimeException thrownException = assertThrows(
            RuntimeException.class,
            () -> xoneBookDealsImpl.bookDeals(inBDatum)
        );

        assertEquals("ERROR: Failed to Book LnB Creation Deals. Check Logs", thrownException.getMessage());
    }

    @Test
    public void testGetTrade() {
        String tradeRef = "TRADE123";
        XoneDeals basketCompoRequest = buildBasketCompo();
        Boolean basketCompo = true;
        String expectedETag = "eTag123";

        XoneGetBasketDetails uriResponse = buildXoneGetBasketDetails("2024-04-10");
        HttpHeaders headers = new HttpHeaders();
        headers.add("eTag", expectedETag);
        ResponseEntity<XoneGetBasketDetails> responseEntity = new ResponseEntity<>(uriResponse, headers, HttpStatus.OK);

        when(restTemplateMock.exchange(
            eq("https://xone-testing/api/v1/trade"),
            eq(HttpMethod.GET),
            any(),
            eq(XoneGetBasketDetails.class),
            anyMap()
        )).thenReturn(responseEntity);

        String eTag = xoneBookDealsImpl.getTrade(tradeRef, basketCompoRequest, basketCompo);

        assertNotNull(eTag);
        assertEquals(expectedETag, eTag);
    }

    @Test
    public void testGetTradeWithDealNotFoundException() {
        String tradeRef = "TRADE_NOT_EXIST";
        XoneDeals basketCompoRequest = buildBasketCompo();
        Boolean basketCompo = true;

        when(restTemplateMock.exchange(
            eq("https://xone-testing/api/v1/trade"),
            eq(HttpMethod.GET),
            any(),
            eq(XoneGetBasketDetails.class),
            anyMap()
        )).thenThrow(new RuntimeException("Cannot load trade"));

        DealNotFoundException thrownException = assertThrows(
            DealNotFoundException.class,
            () -> xoneBookDealsImpl.getTrade(tradeRef, basketCompoRequest, basketCompo)
        );

        assertEquals("Couldn't find TradeReference:TRADE_NOT_EXIST in XOne", thrownException.getMessage());
    }

    private XoneDeals buildBasketCompo() {
        List<BasketComponentsChanges> changesList = new ArrayList<>();
        List<Fixings> fixingsList = new ArrayList<>();

        Fixings fixings = Fixings.builder()
                .fixingType("Stock")
                .fixingValue(4.35)
                .fixingName("ABC.LN")
                .fxRateValue(null)
                .estimated(false)
                .manual(true)
                .build();
        fixingsList.add(fixings);

        BasketComponentsChanges basketChange = BasketComponentsChanges.builder()
                .modificationType("Modified")
                .underlyingName("ABC.LN")
                .deltaPonderation(123123)
                .build();
        changesList.add(basketChange);

        XoneEventInfo eventInfo = XoneEventInfo.builder()
                .comments(null)
                .eventDate("2024-04-10")
                .valueDate("2024-04-11")
                .owner("ABCDE")
                .build();

        return XoneDeals.builder()
                .eventInfo(eventInfo)
                .actions("BasketIncreaseDecrease")
                .confirmationToBeChecked(false)
                .resetMode("FIFO")
                .basketRemodellingMode("Standard")
                .fixings(fixingsList)
                .basketComponentsChanges(changesList)
                .observeNewRateFixing(true)
                .dividendCurrentFlowMode("Accrued CouponWithSamePaymentDate")
                .equityCurrentFlowMode("Accrued CouponWithEffectivePaymentDate")
                .rateCurrentFlowMode("Accrued CouponWithEffectivePaymentDate")
                .build();
    }

    private XoneGetBasketDetails buildXoneGetBasketDetails(String date) {
        XoneGetBasketDetails basketDetails = new XoneGetBasketDetails();

        XoneProductInfo productInfo = new XoneProductInfo();
        XoneReturnLeg returnLeg = new XoneReturnLeg();

        ResetFlows flows = ResetFlows.builder()
                .flowType("Performance")
                .startDate(date)
                .build();

        List<ResetFlows> flowsList = new ArrayList<>();
        flowsList.add(flows);

        returnLeg.setFlows(flowsList);
        productInfo.setReturnLeg(returnLeg);
        basketDetails.setProductInfo(productInfo);

        return basketDetails;
    }
}
