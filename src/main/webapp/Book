import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import sgcib.tsf.dragonBook.DragonBookApplication;
import sgcib.tsf.dragonBook.model.xone.basket.compo.XoneDeals;
import sgcib.tsf.dragonBook.model.xone.basket.compo.XoneGetBasketDetails;
import sgcib.tsf.dragonBook.model.xone.basket.compo.XoneUpdateEventsResponse;
import sgcib.tsf.dragonBook.services.exception.CustomException;
import sgcib.tsf.dragonBook.services.exception.DealNotFoundException;

import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;

@SpringBootTest(classes = DragonBookApplication.class)
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
@ExtendWith(SpringExtension.class)
public class XoneBookDealsImplTest {

    @Mock
    private RestTemplate restTemplateMock;

    private XoneBookDealsImpl xoneBookDealsImpl;

    @Before
    public void setup() {
        restTemplateMock = mock(RestTemplate.class);
        xoneBookDealsImpl = new XoneBookDealsImpl(restTemplateMock);
    }

    @Test
    public void testBookDeals() {
        String createDealUrl = "https://test.com/createDeal";
        xoneBookDealsImpl.setCreateDealUrl(createDealUrl);

        XoneDeals lnBDatum = new XoneDeals();
        XoneUpdateEventsResponse expectedResponse = new XoneUpdateEventsResponse();

        ResponseEntity<XoneUpdateEventsResponse> responseEntity = ResponseEntity.ok(expectedResponse);
        Mockito.when(restTemplateMock.exchange(eq(createDealUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(XoneUpdateEventsResponse.class)))
                .thenReturn(responseEntity);

        XoneUpdateEventsResponse result = xoneBookDealsImpl.bookDeals(lnBDatum);

        Assert.assertNotNull(result);
        Assert.assertEquals(expectedResponse, result);
    }

    @Test(expected = CustomException.class)
    public void testBookDealsServerError() {
        String createDealUrl = "https://test.com/createDeal";
        xoneBookDealsImpl.setCreateDealUrl(createDealUrl);

        XoneDeals lnBDatum = new XoneDeals();

        Mockito.when(restTemplateMock.exchange(eq(createDealUrl), eq(HttpMethod.POST), any(HttpEntity.class), eq(XoneUpdateEventsResponse.class)))
                .thenThrow(HttpServerErrorException.class);

        xoneBookDealsImpl.bookDeals(lnBDatum);
    }

    @Test
    public void testUpdateEvents() {
        String dealUrl = "https://test.com/deal";
        xoneBookDealsImpl.setDealUrl(dealUrl);

        XoneDeals xoneRequest = new XoneDeals();
        String tradeRef = "TRADE123";
        Boolean basketCompo = true;
        String eTag = "12345";

        HttpHeaders headers = new HttpHeaders();
        headers.add("If-Match", eTag);
        HttpEntity<Object> request = new HttpEntity<>(xoneRequest, headers);

        XoneUpdateEventsResponse expectedResponse = new XoneUpdateEventsResponse();

        Mockito.when(xoneBookDealsImpl.getTrade(tradeRef, xoneRequest, basketCompo)).thenReturn(eTag);
        ResponseEntity<XoneUpdateEventsResponse> responseEntity = ResponseEntity.ok(expectedResponse);
        Mockito.when(restTemplateMock.exchange(eq(dealUrl), eq(HttpMethod.POST), eq(request), eq(XoneUpdateEventsResponse.class), any(Map.class)))
                .thenReturn(responseEntity);

        XoneUpdateEventsResponse result = xoneBookDealsImpl.updateEvents(xoneRequest, tradeRef, basketCompo);

        Assert.assertNotNull(result);
        Assert.assertEquals(expectedResponse, result);
    }

    @Test(expected = CustomException.class)
    public void testUpdateEventsServerError() {
        String dealUrl = "https://test.com/deal";
        xoneBookDealsImpl.setDealUrl(dealUrl);

        XoneDeals xoneRequest = new XoneDeals();
        String tradeRef = "TRADE123";
        Boolean basketCompo = true;
        String eTag = "12345";

        HttpHeaders headers = new HttpHeaders();
        headers.add("If-Match", eTag);
        HttpEntity<Object> request = new HttpEntity<>(xoneRequest, headers);

        Mockito.when(xoneBookDealsImpl.getTrade(tradeRef, xoneRequest, basketCompo)).thenReturn(eTag);
        Mockito.when(restTemplateMock.exchange(eq(dealUrl), eq(HttpMethod.POST), eq(request), eq(XoneUpdateEventsResponse.class), any(Map.class)))
                .thenThrow(HttpServerErrorException.class);

        xoneBookDealsImpl.updateEvents(xoneRequest, tradeRef, basketCompo);
    }

    @Test
    public void testGetTrade() {
        String eTagUrl = "https://test.com/eTag";
        xoneBookDealsImpl.setETagUrl(eTagUrl);

        String tradeRef = "TRADE123";
        XoneDeals basketCompoRequest = new XoneDeals();
        Boolean basketCompo = true;

        XoneGetBasketDetails xoneGetBasketDetails = new XoneGetBasketDetails();
        ResponseEntity<XoneGetBasketDetails> responseEntity = ResponseEntity.ok(xoneGetBasketDetails);

        Mockito.when(restTemplateMock.exchange(eq(eTagUrl), eq(HttpMethod.GET), eq(null), eq(XoneGetBasketDetails.class), any(Map.class)))
                .thenReturn(responseEntity);

        String result = xoneBookDealsImpl.getTrade(tradeRef, basketCompoRequest, basketCompo);

        Assert.assertNotNull(result);
    }

    @Test(expected = DealNotFoundException.class)
    public void testGetTradeDealNotFound() {
        String eTagUrl = "https://test.com/eTag";
        xoneBookDealsImpl.setETagUrl(eTagUrl);

        String tradeRef = "TRADE123";
        XoneDeals basketCompoRequest = new XoneDeals();
        Boolean basketCompo = true;

        Mockito.when(restTemplateMock.exchange(eq(eTagUrl), eq(HttpMethod.GET), eq(null), eq(XoneGetBasketDetails.class), any(Map.class)))
                .thenThrow(new RuntimeException("Cannot load trade"));

        xoneBookDealsImpl.getTrade(tradeRef, basketCompoRequest, basketCompo);
    }

    @Test(expected = CustomException.class)
    public void testGetTradeException() {
        String eTagUrl = "https://test.com/eTag";
        xoneBookDealsImpl.setETagUrl(eTagUrl);

        String tradeRef = "TRADE123";
        XoneDeals basketCompoRequest = new XoneDeals();
        Boolean basketCompo = true;

        Mockito.when(restTemplateMock.exchange(eq(eTagUrl), eq(HttpMethod.GET), eq(null), eq(XoneGetBasketDetails.class), any(Map.class)))
                .thenThrow(RuntimeException.class);

        xoneBookDealsImpl.getTrade(tradeRef, basketCompoRequest, basketCompo);
    }
}
